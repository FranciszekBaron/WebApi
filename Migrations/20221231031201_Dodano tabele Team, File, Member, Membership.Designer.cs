// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(OrganDbContext))]
    [Migration("20221231031201_Dodano tabele Team, File, Member, Membership")]
    partial class DodanotabeleTeamFileMemberMembership
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.Property<int>("fileID")
                        .HasColumnType("int");

                    b.Property<int>("teamID")
                        .HasColumnType("int");

                    b.Property<string>("fileExtension")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("fileSize")
                        .HasColumnType("int");

                    b.HasKey("fileID", "teamID");

                    b.HasIndex("teamID");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Member", b =>
                {
                    b.Property<int>("memberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("memberID"));

                    b.Property<string>("memberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("memberNickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("memberSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("oID")
                        .HasColumnType("int");

                    b.HasKey("memberID");

                    b.HasIndex("oID");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Membership", b =>
                {
                    b.Property<int>("memberID")
                        .HasColumnType("int");

                    b.Property<int>("teamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.HasKey("memberID", "teamID");

                    b.HasIndex("teamID");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Organization", b =>
                {
                    b.Property<int>("oID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("oID"));

                    b.Property<string>("oDomain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("oName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("oID");

                    b.ToTable("Organization", (string)null);

                    b.HasData(
                        new
                        {
                            oID = 1,
                            oDomain = "apple.com",
                            oName = "Apple"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Team", b =>
                {
                    b.Property<int>("teamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("teamID"));

                    b.Property<int>("oID")
                        .HasColumnType("int");

                    b.Property<string>("teamDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("teamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("teamID");

                    b.HasIndex("oID");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.HasOne("WebApplication1.Models.Team", "Team")
                        .WithMany("Files")
                        .HasForeignKey("teamID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApplication1.Models.Member", b =>
                {
                    b.HasOne("WebApplication1.Models.Organization", "Organization")
                        .WithMany("members")
                        .HasForeignKey("oID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebApplication1.Models.Membership", b =>
                {
                    b.HasOne("WebApplication1.Models.Member", "Member")
                        .WithMany("Memberships")
                        .HasForeignKey("memberID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("teamID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApplication1.Models.Team", b =>
                {
                    b.HasOne("WebApplication1.Models.Organization", "Organization")
                        .WithMany("teams")
                        .HasForeignKey("oID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebApplication1.Models.Member", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("WebApplication1.Models.Organization", b =>
                {
                    b.Navigation("members");

                    b.Navigation("teams");
                });

            modelBuilder.Entity("WebApplication1.Models.Team", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
